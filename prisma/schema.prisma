generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model Post {
  id        String  @id @default(cuid())
  title     String
  content   String?
  published Boolean @default(false)
  author    User?   @relation(fields: [authorId], references: [id])
  authorId  String?
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                String             @id @default(cuid())
  name              String?
  email             String?            @unique
  emailVerified     DateTime?
  image             String?
  posts             Post[]
  accounts          Account[]
  sessions          Session[]
  moodEntries       MoodEntry[]
  additionalFactors AdditionalFactor[]
  dailyFactorLogs   DailyFactorLog[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Mood {
  id          Int      @id
  mood_level  Int         @unique
  name        String
  moodEntries MoodEntry[] @relation("MoodToMoodEntry")
  feelings    Feeling[] @relation("MoodToFeeling")
}

model MoodEntry {
  id            String               @id @default(cuid())
  user          User                 @relation(fields: [userId], references: [id])
  userId        String
  timestamp     DateTime             @default(now())
  mood          Mood                @relation("MoodToMoodEntry", fields: [moodId], references: [id])
  moodId        Int
  journal_entry String?
  influences    MoodEntryInfluence[]
  feelings      MoodEntryFeeling[]
}

model Influence {
  id          Int              @id @default(autoincrement())
  name        String
  icon        String?
  moodEntries MoodEntryInfluence[]
}

model MoodEntryInfluence {
  id          String    @id @default(cuid())
  moodEntry   MoodEntry @relation(fields: [moodEntryId], references: [id])
  moodEntryId String
  influence   Influence @relation(fields: [influenceId], references: [id])
  influenceId Int

  @@unique([moodEntryId, influenceId])
}

model Feeling {
  id          String             @id @default(cuid())
  mood        Mood               @relation("MoodToFeeling", fields: [moodId], references: [id])
  moodId      Int
  name        String
  description String?
  moodEntries MoodEntryFeeling[]
}

model MoodEntryFeeling {
  id          String    @id @default(cuid())
  moodEntry   MoodEntry @relation(fields: [moodEntryId], references: [id])
  moodEntryId String
  feeling     Feeling   @relation(fields: [feelingId], references: [id])
  feelingId   String

  @@unique([moodEntryId, feelingId])
}

model AdditionalFactor {
  id              String            @id @default(cuid())
  name            String
  user            User              @relation(fields: [userId], references: [id])
  userId          String
  dailyFactorLogs DailyFactorLog[]
}

model DailyFactorLog {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  date      DateTime         @default(now())
  factor    AdditionalFactor @relation(fields: [factorId], references: [id])
  factorId  String
}